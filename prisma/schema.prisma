generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  password         String?
  name             String
  role             UserRole
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  emailVerified    DateTime?
  accounts         Account[]
  advertisements   Advertisement[]
  calendar         Calendar[]
  receivedMessages Message[]       @relation("ReceivedMessages")
  sentMessages     Message[]       @relation("SentMessages")
  notifications    Notification[]
  receivedOffers   Offer[]         @relation("ClientOffers")
  offers           Offer[]         @relation("ProviderOffers")
  clientParties    Party[]         @relation("ClientParties")
  profile          Profile?
  provider         Provider?
  services         Service[]
  sessions         Session[]
}

model Profile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  avatar                String?
  phone                 String?
  address               String?
  website               String?
  socialLinks           Json?
  isProStatus           Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  googleBusinessRating  Float?
  googleBusinessReviews Int?
  googleBusinessUrl     String?
  description           String?
  contactPerson         String?
  user                  User     @relation(fields: [userId], references: [id])
}

model Provider {
  id                  String         @id @default(cuid())
  userId              String         @unique
  businessName        String
  businessDescription String?
  businessAddress     String?
  businessCity        String?
  businessState       String?
  businessZip         String?
  businessPhone       String?
  businessEmail       String?
  businessWebsite     String?
  businessLogo        String?
  ein                 String?
  taxIdVerified       Boolean        @default(false)
  bankAccountVerified Boolean        @default(false)
  stripeAccountId     String?
  paymentTerms        String?
  commissionRate      Float          @default(10.0)
  isApproved          Boolean        @default(false)
  approvedAt          DateTime?
  rejectionReason     String?
  businessType        String?
  foundedYear         Int?
  employeeCount       Int?
  insuranceProvider   String?
  insurancePolicyNum  String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  user                User           @relation(fields: [userId], references: [id])
  serviceCities       ProviderCity[]
}

model Calendar {
  id            String   @id @default(cuid())
  userId        String
  childName     String
  birthDate     DateTime
  sendReminders Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model ServiceCategory {
  id          String           @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  slug        String           @unique
  filters     CategoryFilter[]
  services    Service[]
}

model CategoryFilter {
  id         String          @id @default(cuid())
  categoryId String
  name       String
  type       String
  options    String[]
  isRequired Boolean         @default(false)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  iconUrl    String?
  category   ServiceCategory @relation(fields: [categoryId], references: [id])
}

model City {
  id             String         @id @default(cuid())
  name           String
  slug           String         @unique
  state          String
  isDefault      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  parties        Party[]
  providerCities ProviderCity[]
  services       Service[]
}

model Service {
  id                  String          @id @default(cuid())
  providerId          String
  categoryId          String
  cityId              String?
  name                String
  description         String
  price               Decimal
  photos              String[]
  status              ServiceStatus   @default(ACTIVE)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  availableDays       String[]
  availableHoursEnd   String?
  availableHoursStart String?
  maxRentalHours      Int?
  minRentalHours      Int?
  colors              String[]        @default([])
  metadata            String?
  offers              Offer[]
  partyServices       PartyService[]
  category            ServiceCategory @relation(fields: [categoryId], references: [id])
  city                City?           @relation(fields: [cityId], references: [id])
  provider            User            @relation(fields: [providerId], references: [id])
  addons              ServiceAddon[]
}

model ServiceAddon {
  id          String   @id @default(cuid())
  serviceId   String
  title       String
  description String?
  price       Decimal
  thumbnail   String?
  isRequired  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Party {
  id            String         @id @default(cuid())
  clientId      String
  cityId        String
  name          String
  date          DateTime
  startTime     String
  duration      Int
  guestCount    Int
  status        PartyStatus    @default(DRAFT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  city          City           @relation(fields: [cityId], references: [id])
  client        User           @relation("ClientParties", fields: [clientId], references: [id])
  partyServices PartyService[]
  transactions  Transaction[]
}

model PartyService {
  id              String   @id @default(cuid())
  partyId         String
  serviceId       String
  specificOptions Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  offers          Offer[]
  party           Party    @relation(fields: [partyId], references: [id])
  service         Service  @relation(fields: [serviceId], references: [id])
}

model Offer {
  id             String       @id @default(cuid())
  providerId     String
  clientId       String
  serviceId      String
  partyServiceId String
  price          Decimal
  description    String
  photos         String[]
  status         OfferStatus  @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  chat           Chat?
  client         User         @relation("ClientOffers", fields: [clientId], references: [id])
  partyService   PartyService @relation(fields: [partyServiceId], references: [id])
  provider       User         @relation("ProviderOffers", fields: [providerId], references: [id])
  service        Service      @relation(fields: [serviceId], references: [id])
  transaction    Transaction?
}

model Transaction {
  id                 String            @id @default(cuid())
  partyId            String
  offerId            String            @unique
  amount             Decimal
  status             TransactionStatus @default(PENDING)
  paymentIntentId    String?
  paymentMethodId    String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  clientFeePercent   Float             @default(5.0)
  escrowEndTime      DateTime?
  escrowStartTime    DateTime?
  providerFeePercent Float             @default(10.0)
  reviewDeadline     DateTime?
  termsAccepted      Boolean?          @default(false)
  termsAcceptedAt    DateTime?
  termsType          String?
  dispute            Dispute?
  offer              Offer             @relation(fields: [offerId], references: [id])
  party              Party             @relation(fields: [partyId], references: [id])
}

model Dispute {
  id            String      @id @default(cuid())
  transactionId String      @unique
  reason        String
  description   String
  resolution    String?
  isResolved    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Chat {
  id        String    @id @default(cuid())
  offerId   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  offer     Offer     @relation(fields: [offerId], references: [id])
  messages  Message[]
}

model Message {
  id              String   @id @default(cuid())
  chatId          String
  senderId        String
  receiverId      String
  content         String
  originalContent String?
  isFlagged       Boolean  @default(false)
  flagReason      String?
  createdAt       DateTime @default(now())
  chat            Chat     @relation(fields: [chatId], references: [id])
  receiver        User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender          User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false)
  chatId    String?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model Advertisement {
  id        String            @id @default(cuid())
  userId    String
  type      AdvertisementType
  startDate DateTime
  endDate   DateTime
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProviderCity {
  id         String   @id @default(cuid())
  providerId String
  cityId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  city       City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, cityId])
}

enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  PENDING_APPROVAL
}

enum PartyStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OfferStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  ESCROW
  COMPLETED
  REFUNDED
  DISPUTED
  PROVIDER_REVIEW
  APPROVED
  DECLINED
}

enum NotificationType {
  NEW_OFFER
  OFFER_UPDATED
  MESSAGE
  PAYMENT
  SYSTEM
}

enum AdvertisementType {
  HOMEPAGE
  FIRST_WAVE
}
